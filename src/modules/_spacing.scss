@mixin all-sides($prop, $pfx, $sfx, $total, $i) {
  @if ($prop == 'padding') {
  } @else if ($i == 0) {
    .#{$pfx}-auto#{$sfx} {
      #{$prop}: auto;
    }
  }

  .#{$pfx}#{$i}#{$sfx} {
    #{$prop}: $total;
  }
}
@mixin two-sides($side, $side1, $side2, $prop, $pfx, $sfx, $total, $i) {
  @if ($prop == 'padding') {
  } @else if ($i == 0) {
    .#{$pfx}#{$side}-auto#{$sfx} {
      #{$prop}-#{$side1}: auto;
      #{$prop}-#{$side2}: auto;
    }
  }

  .#{$pfx}#{$side}#{$i}#{$sfx} {
    #{$prop}-#{$side1}: $total;
    #{$prop}-#{$side2}: $total;
  }
}
@mixin one-side($sides, $side, $prop, $pfx, $sfx, $total, $i) {
  @if ($prop == 'padding') {
  } @else if ($i == 0) {
    .#{$pfx}#{$side}-auto#{$sfx} {
      #{$prop}-#{$sides}: auto;
    }
  }

  .#{$pfx}#{$side}#{$i}#{$sfx} {
    #{$prop}-#{$sides}: $total;
  }
}
// Spacing
@mixin based-spacing($prop, $value, $n, $sfx) {
  // $pfx will change the prefix class
  $pfx: '';
  @if ($prop == 'margin') {
    $pfx: 'm';
  } @else if ($prop == 'padding') {
    $pfx: 'p';
  } @else {
    @error 'Sorry, but `#{$prop}` is not supported.';
  }
  // Generate classes
  @each $side in map_keys($based_spacing-sides) {
    $sides: map-get($based_spacing-sides, #{$side});
    @for $i from 0 through $n {
      $total: ($value * $i);
      @if ($side == all) {
        @include all-sides($prop, $pfx, $sfx, $total, $i);
      } @else if ($side == y) {
        @include two-sides('y', top, bottom, $prop, $pfx, $sfx, $total, $i);
      } @else if ($side == x) {
        @include two-sides('x', left, right, $prop, $pfx, $sfx, $total, $i);
      } @else {
        @include one-side($sides, $side, $prop, $pfx, $sfx, $total, $i);
      }
    }
  }
}
